#!/usr/bin/env python3
# Kawariki -- NW.js game compat tool
# ------------------------------------------------------------------
# Copyright (C) 2021-2022 Taeyeon Mori <taeyeon at oro dot sodimm dot me>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# ------------------------------------------------------------------
# Please note that any files handled by this tool
# are covered by their respective third-party licenses.
# Content generated in whole by the tool without being derived from
# third-party distributions shall be in the public domain under CC0.

import builtins
import sys
import pathlib


# Tag and force output to stderr to distinguish from game output
builtin_print = builtins.print

def print(*messages, **opts):
    if "file" not in opts:
        opts["file"] = sys.stderr
    return builtin_print("[Kawariki]", *messages, **opts)

builtins.print = print


# Add lib folder to path
path = pathlib.Path(sys.argv[0]).parent.resolve()
sys.path.append(str(path / "lib"))


# Check python version
if not sys.version_info >= (3, 10):
    # functools.cached_property, possibly others
    # Try to provide an easily understood error message instead of failing later
    # This means modules in kawariki.ui should be as backward-compatible as possible.
    from kawariki.ui import create_gui, MsgType
    if gui := create_gui():
        gui.show_msg(MsgType.Error, "RMMV NW.js Runtime requires more recent Python",
            f"Python 3.10 or later is required, but currently running:\nPython {sys.version}")

    raise ImportError("Unsupported python version {}.{}.{}{}{}. At least 3.10 is required.".format(*sys.version_info))


# Run
from kawariki.app import App  # type: ignore[import-not-found] # noqa: E402
from kawariki.main import main  # type: ignore[import-not-found] # noqa: E402
# import-not-found - sys.path is set up above
# E402 - Needs to be after version check

app = App(path)
try:
    sys.exit(main(app, sys.argv))
except Exception:
    import traceback
    app.show_error(traceback.format_exc())
    raise
